/* jshint ignore:start */
/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

var Comment = React.createClass({
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

var VaadinGrid = React.createClass({

  render: function() {
    return (
      <vaadin-grid ref="grid" selection-mode={this.props.selectionMode}>
        {this.props.children}
      </vaadin-grid>
    );
  },

  componentWillReceiveProps: function(newProps) {
    if (!this.refs.grid.items ||Â this.refs.grid.items.length !== newProps.items.length) {
      this.refs.grid.items = newProps.items;
    }
    this.refs.grid.addEventListener('selected-items-changed', this.props.onSelectedItemsChanged);
  }
});


var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },

  commentSelected: function(index) {
    if (index.length > 0) {
      this.refs.form.setState(this.state.data[index]);
    }
  },

  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList onCommentSelected={this.commentSelected} data={this.state.data} />
        <CommentForm ref="form" onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

var CommentList = React.createClass({

  selectedItemsChanged: function(e) {
    console.log('selectedItemsChanged', e);
  },

  render: function() {
    return (
      <VaadinGrid items={this.props.data} selectionMode="multi" onSelectedItemsChanged={this.selectedItemsChanged}>
        <table>
          <colgroup>
            <col name="id" />
            <col name="author" />
            <col name="text" />
            <col name="file" />
          </colgroup>
          <thead>
            <tr>
              <th>Timestamp</th>
              <th>Author</th>
              <th>Comment</th>
            </tr>
          </thead>
        </table>
      </VaadinGrid>
    );
  }
});

var CommentForm = React.createClass({
  initialized: false,
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    var file = (this.refs.upload.files.length > 0 ? this.refs.upload.files[0].name : '');
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text, file: file});
    this.setState({author: '', text: ''});
    this.refs.upload.files = [];
  },
  render: function() {
    if (!this.initialized) {
      Polymer.Base.async(function() {
        this.refs.comment.items = [
          'Ok, sounds good.',
          'Nope, not going to happen.'
        ];
        this.refs.submit.addEventListener('click', this.handleSubmit);
        this.refs.comment.addEventListener('value-changed', this.handleTextChange);
        this.refs.author.addEventListener('value-changed', this.handleAuthorChange);
      }.bind(this));
      this.initialized = true;
    }

    return (
      <form className="commentForm">
        <fieldset>
          <legend>Add your comment</legend>
          <paper-input
            ref="author"
            placeholder="Your name"
            value={this.state.author}>
          </paper-input>
          <vaadin-combo-box
            ref="comment"
            label="Say something..."
            allow-custom-value
            value={this.state.text}>
          </vaadin-combo-box>
          <vaadin-upload ref="upload" accept=".png" max-files="1" target="/upload"></vaadin-upload>
          <paper-button ref="submit">Post</paper-button>
        </fieldset>
      </form>
    );
  }
});

window.addEventListener('WebComponentsReady', function() {
  ReactDOM.render(
    <CommentBox url="/api/comments" pollInterval={2000} />,
    document.getElementById('content')
  );
});
